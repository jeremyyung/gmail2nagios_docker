Summary: These containers serve two functions: 1) record data from alert emails and store it in the g2n.json database file 2) reflect status data from that file in Nagios GUI.

Components:
*g2n-docker - Docker container responsible for keeping the g2n.json file up-to-date.
-/opt
  /gmail2nagios_docker/Nagios_email_alerts/gmail2nag/src/gmail2nag.py - A cronjob runs this every 10 minutes to create/update the g2n.json database file.
  /g2nout/g2n.json - JSON database file of all info scraped from alert emails. Should be mounted as docker volume so that data will persist.
  /envecho.sh - Simple bash script that echos current environment variables to a file (/tmp/g2n.env). Only way I could think of, to pass docker-compose variables to the script.
-/etc/cron.d/cronfile - Premade crontab file that's installed into the container.
-Docker volumes:
  g2n_db:	/opt/g2nout (shared with nagios-docker container)
 
*nagios-docker - Container for the nagios server, uses nagmanager.py to create object files.
-/opt
  /nagios
    /libexec/hostpoll.py - Script used by Nagios services. Reads g2n.json file to get status updates.
    /pyfiles
      /nagmanager.py - Run manually to erase Nagios object files (/opt/nagios/etc/services/icm_objects/) and recreates them.
      /nagmanager.cfg - Config file for nagmanager.py; holds file paths and email-to-customer pairings.
      /nobjtemplates.cfg - Stores nagios object templates for nagmanager.py.
    /etc
      /services/icm_objects - Stores all nagios object files generated by nagmanager.py
      /cgi.cfg - This is where you set Nagios permissions for authenticated users. (i.e. allows icmAdmin to do stuff from Nagios GUI)  
  /g2nout/g2n.json - Shared volume that holds the g2n.json file.
-/etc/ssmtp/ssmtp.conf - Config file for the smtp service. Had to add my personal gmail credentials so that Nagios could send out emails.
-Docker volumes:
  nag:		/opt/nagios
  nag_etc:	/opt/nagios/etc
  nag_libexec:	/opt/nagios/libexec
  nag_ssmtp:	/etc/ssmtp
  g2n_db:	/opt/g2nout

Setup:
1. Set docker to use "local" log driver. The g2n container could generate a large log file. I think doing this will enable some sort of log rotation.
 *cat /etc/docker/daemon.json 
 *{
   "log-driver": "local",
   "log-opts": {
     "max-size": "10m"
   }
 }
2. Setup a GMAIL 'App Password', so that gmail2nag.py can read emails.
 *Go to account.google.com with your account.
 *On the left side, choose Security.
 *Under 'Signing into Google', Choose 'App passwords'.
 *Confirm your identity.
 *Choose Custom.
 *Use any name for your application and generate the password.
 *Keep a record of this password for later. (e.g. zeilvzlgjqiozsxx)
3. Open the .../nagiosmon/Nagdocker/nagcompose/docker-compose.yml file
4. Under the g2n > environment section, update the relevant variables.
5. Build the reqisite docker images in order (assumes you're in /nagcompose):
 * docker build -f ../c8base_dockerfile -t centos8:base .
 * docker build -f ../g2n-docker/Dockerfile -t gmail2nag ../g2n-docker/
 * docker build -f ../nagios-docker/Dockerfile -t nagios-g2n ../nagios-docker
6. docker-compose up -d
7. Let g2n container run for a few hours to create the g2n.json file
8. Then, you'll need to run nagmanager.py in the nagios container, to setup the Nagios object files.
 * docker exec -it nagios bash
 * vi nagmanager.cfg
  - Update the [ADDRESS_MAPPING] section as needed.
 * python3 nagmanager.py
  - If any email addresses are not mapped to customers, it will let you know.
  - It'll let you know if /opt/nagios/etc/nagios.cfg needs to be updated
 * Exit and restart the nagios container
9. (optional) If you need nagios to send out emails, update /etc/ssmtp/ssmtp.conf
 * Near the bottom, will use the app password credentials from step 1
 * Some "WARNING" emails come from issues that will never be fixed, which would lead to Nagios email spam. I usually just disable all email alerts and use the dashboard
10. (optional) Email addresses that receive nagios alerts are specified in /opt/nagios/etc/services/icm_objects/0_configs/custcontacts.cfg


